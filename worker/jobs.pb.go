// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: jobs.proto

package worker

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskStatus int32

const (
	TaskStatus_SUCCESS        TaskStatus = 0
	TaskStatus_CLIENT_FAILURE TaskStatus = 1
	TaskStatus_TIMEOUT        TaskStatus = 2
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "CLIENT_FAILURE",
		2: "TIMEOUT",
	}
	TaskStatus_value = map[string]int32{
		"SUCCESS":        0,
		"CLIENT_FAILURE": 1,
		"TIMEOUT":        2,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_jobs_proto_enumTypes[0].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_jobs_proto_enumTypes[0]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{0}
}

type OpenAssignmentsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection string `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *OpenAssignmentsStreamRequest) Reset() {
	*x = OpenAssignmentsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAssignmentsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAssignmentsStreamRequest) ProtoMessage() {}

func (x *OpenAssignmentsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAssignmentsStreamRequest.ProtoReflect.Descriptor instead.
func (*OpenAssignmentsStreamRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *OpenAssignmentsStreamRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type OpenAssignmentsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId int64 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *OpenAssignmentsStreamResponse) Reset() {
	*x = OpenAssignmentsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenAssignmentsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAssignmentsStreamResponse) ProtoMessage() {}

func (x *OpenAssignmentsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAssignmentsStreamResponse.ProtoReflect.Descriptor instead.
func (*OpenAssignmentsStreamResponse) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *OpenAssignmentsStreamResponse) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type CloseAssignmentsStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   int64  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *CloseAssignmentsStreamRequest) Reset() {
	*x = CloseAssignmentsStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAssignmentsStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAssignmentsStreamRequest) ProtoMessage() {}

func (x *CloseAssignmentsStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAssignmentsStreamRequest.ProtoReflect.Descriptor instead.
func (*CloseAssignmentsStreamRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *CloseAssignmentsStreamRequest) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *CloseAssignmentsStreamRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type CloseAssignmentsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseAssignmentsStreamResponse) Reset() {
	*x = CloseAssignmentsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseAssignmentsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAssignmentsStreamResponse) ProtoMessage() {}

func (x *CloseAssignmentsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAssignmentsStreamResponse.ProtoReflect.Descriptor instead.
func (*CloseAssignmentsStreamResponse) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{3}
}

type WantAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId     int64  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	AddWatermark int32  `protobuf:"varint,2,opt,name=add_watermark,json=addWatermark,proto3" json:"add_watermark,omitempty"` // Request N additional tasks
	Collection   string `protobuf:"bytes,3,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *WantAssignmentsRequest) Reset() {
	*x = WantAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantAssignmentsRequest) ProtoMessage() {}

func (x *WantAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*WantAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *WantAssignmentsRequest) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *WantAssignmentsRequest) GetAddWatermark() int32 {
	if x != nil {
		return x.AddWatermark
	}
	return 0
}

func (x *WantAssignmentsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type WantAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddedWatermark int32 `protobuf:"varint,1,opt,name=added_watermark,json=addedWatermark,proto3" json:"added_watermark,omitempty"` // N additional tasks granted
	Watermark      int32 `protobuf:"varint,2,opt,name=watermark,proto3" json:"watermark,omitempty"`                                 // Total number of tasks granted
}

func (x *WantAssignmentsResponse) Reset() {
	*x = WantAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WantAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WantAssignmentsResponse) ProtoMessage() {}

func (x *WantAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WantAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*WantAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *WantAssignmentsResponse) GetAddedWatermark() int32 {
	if x != nil {
		return x.AddedWatermark
	}
	return 0
}

func (x *WantAssignmentsResponse) GetWatermark() int32 {
	if x != nil {
		return x.Watermark
	}
	return 0
}

type SurrenderAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   int64  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *SurrenderAssignmentsRequest) Reset() {
	*x = SurrenderAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurrenderAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderAssignmentsRequest) ProtoMessage() {}

func (x *SurrenderAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*SurrenderAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *SurrenderAssignmentsRequest) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *SurrenderAssignmentsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type SurrenderAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemovedWatermark int32 `protobuf:"varint,1,opt,name=removed_watermark,json=removedWatermark,proto3" json:"removed_watermark,omitempty"`
}

func (x *SurrenderAssignmentsResponse) Reset() {
	*x = SurrenderAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurrenderAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurrenderAssignmentsResponse) ProtoMessage() {}

func (x *SurrenderAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurrenderAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*SurrenderAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *SurrenderAssignmentsResponse) GetRemovedWatermark() int32 {
	if x != nil {
		return x.RemovedWatermark
	}
	return 0
}

type StreamAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   int64  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *StreamAssignmentsRequest) Reset() {
	*x = StreamAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamAssignmentsRequest) ProtoMessage() {}

func (x *StreamAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*StreamAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *StreamAssignmentsRequest) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *StreamAssignmentsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type GetPendingAssignmentsCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   int64  `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Collection string `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *GetPendingAssignmentsCountRequest) Reset() {
	*x = GetPendingAssignmentsCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingAssignmentsCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingAssignmentsCountRequest) ProtoMessage() {}

func (x *GetPendingAssignmentsCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingAssignmentsCountRequest.ProtoReflect.Descriptor instead.
func (*GetPendingAssignmentsCountRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *GetPendingAssignmentsCountRequest) GetStreamId() int64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *GetPendingAssignmentsCountRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type PendingAssignmentsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Watermark int32 `protobuf:"varint,1,opt,name=watermark,proto3" json:"watermark,omitempty"` // N additional tasks for this stream
}

func (x *PendingAssignmentsCount) Reset() {
	*x = PendingAssignmentsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAssignmentsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAssignmentsCount) ProtoMessage() {}

func (x *PendingAssignmentsCount) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAssignmentsCount.ProtoReflect.Descriptor instead.
func (*PendingAssignmentsCount) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *PendingAssignmentsCount) GetWatermark() int32 {
	if x != nil {
		return x.Watermark
	}
	return 0
}

type AssignmentBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
}

func (x *AssignmentBatch) Reset() {
	*x = AssignmentBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentBatch) ProtoMessage() {}

func (x *AssignmentBatch) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentBatch.ProtoReflect.Descriptor instead.
func (*AssignmentBatch) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{11}
}

func (x *AssignmentBatch) GetAssignments() []*Assignment {
	if x != nil {
		return x.Assignments
	}
	return nil
}

type KafkaPointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Partition int32 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset    int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *KafkaPointer) Reset() {
	*x = KafkaPointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaPointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaPointer) ProtoMessage() {}

func (x *KafkaPointer) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaPointer.ProtoReflect.Descriptor instead.
func (*KafkaPointer) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{12}
}

func (x *KafkaPointer) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *KafkaPointer) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Assignment instructs the client to fetch an item.
type Assignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locator      *ItemLocator  `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	KafkaPointer *KafkaPointer `protobuf:"bytes,2,opt,name=kafka_pointer,json=kafkaPointer,proto3" json:"kafka_pointer,omitempty"`
}

func (x *Assignment) Reset() {
	*x = Assignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Assignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Assignment) ProtoMessage() {}

func (x *Assignment) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Assignment.ProtoReflect.Descriptor instead.
func (*Assignment) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{13}
}

func (x *Assignment) GetLocator() *ItemLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *Assignment) GetKafkaPointer() *KafkaPointer {
	if x != nil {
		return x.KafkaPointer
	}
	return nil
}

type ReportAssignmentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reports    []*AssignmentReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	Collection string              `protobuf:"bytes,2,opt,name=collection,proto3" json:"collection,omitempty"`
}

func (x *ReportAssignmentsRequest) Reset() {
	*x = ReportAssignmentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAssignmentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAssignmentsRequest) ProtoMessage() {}

func (x *ReportAssignmentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAssignmentsRequest.ProtoReflect.Descriptor instead.
func (*ReportAssignmentsRequest) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{14}
}

func (x *ReportAssignmentsRequest) GetReports() []*AssignmentReport {
	if x != nil {
		return x.Reports
	}
	return nil
}

func (x *ReportAssignmentsRequest) GetCollection() string {
	if x != nil {
		return x.Collection
	}
	return ""
}

type AssignmentReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KafkaPointer *KafkaPointer `protobuf:"bytes,1,opt,name=kafka_pointer,json=kafkaPointer,proto3" json:"kafka_pointer,omitempty"`
	Status       TaskStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=od2_network.hive.worker.TaskStatus" json:"status,omitempty"`
}

func (x *AssignmentReport) Reset() {
	*x = AssignmentReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentReport) ProtoMessage() {}

func (x *AssignmentReport) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentReport.ProtoReflect.Descriptor instead.
func (*AssignmentReport) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{15}
}

func (x *AssignmentReport) GetKafkaPointer() *KafkaPointer {
	if x != nil {
		return x.KafkaPointer
	}
	return nil
}

func (x *AssignmentReport) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_SUCCESS
}

type AssignmentResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId   int64                `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Report     *AssignmentReport    `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	FinishTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Locator    *ItemLocator         `protobuf:"bytes,4,opt,name=locator,proto3" json:"locator,omitempty"`
}

func (x *AssignmentResult) Reset() {
	*x = AssignmentResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignmentResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignmentResult) ProtoMessage() {}

func (x *AssignmentResult) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignmentResult.ProtoReflect.Descriptor instead.
func (*AssignmentResult) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{16}
}

func (x *AssignmentResult) GetWorkerId() int64 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *AssignmentResult) GetReport() *AssignmentReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *AssignmentResult) GetFinishTime() *timestamp.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *AssignmentResult) GetLocator() *ItemLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

type ReportAssignmentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Acknowledged int64 `protobuf:"varint,1,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
}

func (x *ReportAssignmentsResponse) Reset() {
	*x = ReportAssignmentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_jobs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportAssignmentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportAssignmentsResponse) ProtoMessage() {}

func (x *ReportAssignmentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_jobs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportAssignmentsResponse.ProtoReflect.Descriptor instead.
func (*ReportAssignmentsResponse) Descriptor() ([]byte, []int) {
	return file_jobs_proto_rawDescGZIP(), []int{17}
}

func (x *ReportAssignmentsResponse) GetAcknowledged() int64 {
	if x != nil {
		return x.Acknowledged
	}
	return 0
}

var File_jobs_proto protoreflect.FileDescriptor

var file_jobs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6f, 0x64,
	0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x1c, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1d, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x22, 0x5c, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x20, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7a, 0x0a, 0x16, 0x57, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x64, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a,
	0x17, 0x57, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x65, 0x64, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22,
	0x5a, 0x0a, 0x1b, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x1c, 0x53,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x57,
	0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x57, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x60, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x17, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x58, 0x0a, 0x0f,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x45, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0d, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a,
	0x0d, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4b,
	0x61, 0x66, 0x6b, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x64, 0x32, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x64, 0x32, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x3f, 0x0a, 0x19, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x64, 0x2a, 0x3a, 0x0a, 0x0a, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x02, 0x32, 0x9b, 0x07, 0x0a, 0x0b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x86, 0x01, 0x0a, 0x15, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x35, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x2e, 0x6f, 0x64, 0x32, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x37, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x8a, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x6f, 0x64, 0x32, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e,
	0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x74, 0x0a, 0x0f, 0x57, 0x61, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x64, 0x32,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x64,
	0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x57, 0x61, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01,
	0x0a, 0x14, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6f,
	0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x64,
	0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x30, 0x01, 0x12, 0x7a, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x6f,
	0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69, 0x76, 0x65, 0x2e,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x32, 0x2e, 0x6f, 0x64, 0x32, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x68, 0x69,
	0x76, 0x65, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x6f, 0x2e, 0x6f, 0x64, 0x32, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x68, 0x69, 0x76, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_jobs_proto_rawDescOnce sync.Once
	file_jobs_proto_rawDescData = file_jobs_proto_rawDesc
)

func file_jobs_proto_rawDescGZIP() []byte {
	file_jobs_proto_rawDescOnce.Do(func() {
		file_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_jobs_proto_rawDescData)
	})
	return file_jobs_proto_rawDescData
}

var file_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_jobs_proto_goTypes = []interface{}{
	(TaskStatus)(0),                           // 0: od2_network.hive.worker.TaskStatus
	(*OpenAssignmentsStreamRequest)(nil),      // 1: od2_network.hive.worker.OpenAssignmentsStreamRequest
	(*OpenAssignmentsStreamResponse)(nil),     // 2: od2_network.hive.worker.OpenAssignmentsStreamResponse
	(*CloseAssignmentsStreamRequest)(nil),     // 3: od2_network.hive.worker.CloseAssignmentsStreamRequest
	(*CloseAssignmentsStreamResponse)(nil),    // 4: od2_network.hive.worker.CloseAssignmentsStreamResponse
	(*WantAssignmentsRequest)(nil),            // 5: od2_network.hive.worker.WantAssignmentsRequest
	(*WantAssignmentsResponse)(nil),           // 6: od2_network.hive.worker.WantAssignmentsResponse
	(*SurrenderAssignmentsRequest)(nil),       // 7: od2_network.hive.worker.SurrenderAssignmentsRequest
	(*SurrenderAssignmentsResponse)(nil),      // 8: od2_network.hive.worker.SurrenderAssignmentsResponse
	(*StreamAssignmentsRequest)(nil),          // 9: od2_network.hive.worker.StreamAssignmentsRequest
	(*GetPendingAssignmentsCountRequest)(nil), // 10: od2_network.hive.worker.GetPendingAssignmentsCountRequest
	(*PendingAssignmentsCount)(nil),           // 11: od2_network.hive.worker.PendingAssignmentsCount
	(*AssignmentBatch)(nil),                   // 12: od2_network.hive.worker.AssignmentBatch
	(*KafkaPointer)(nil),                      // 13: od2_network.hive.worker.KafkaPointer
	(*Assignment)(nil),                        // 14: od2_network.hive.worker.Assignment
	(*ReportAssignmentsRequest)(nil),          // 15: od2_network.hive.worker.ReportAssignmentsRequest
	(*AssignmentReport)(nil),                  // 16: od2_network.hive.worker.AssignmentReport
	(*AssignmentResult)(nil),                  // 17: od2_network.hive.worker.AssignmentResult
	(*ReportAssignmentsResponse)(nil),         // 18: od2_network.hive.worker.ReportAssignmentsResponse
	(*ItemLocator)(nil),                       // 19: od2_network.hive.worker.ItemLocator
	(*timestamp.Timestamp)(nil),               // 20: google.protobuf.Timestamp
}
var file_jobs_proto_depIdxs = []int32{
	14, // 0: od2_network.hive.worker.AssignmentBatch.assignments:type_name -> od2_network.hive.worker.Assignment
	19, // 1: od2_network.hive.worker.Assignment.locator:type_name -> od2_network.hive.worker.ItemLocator
	13, // 2: od2_network.hive.worker.Assignment.kafka_pointer:type_name -> od2_network.hive.worker.KafkaPointer
	16, // 3: od2_network.hive.worker.ReportAssignmentsRequest.reports:type_name -> od2_network.hive.worker.AssignmentReport
	13, // 4: od2_network.hive.worker.AssignmentReport.kafka_pointer:type_name -> od2_network.hive.worker.KafkaPointer
	0,  // 5: od2_network.hive.worker.AssignmentReport.status:type_name -> od2_network.hive.worker.TaskStatus
	16, // 6: od2_network.hive.worker.AssignmentResult.report:type_name -> od2_network.hive.worker.AssignmentReport
	20, // 7: od2_network.hive.worker.AssignmentResult.finish_time:type_name -> google.protobuf.Timestamp
	19, // 8: od2_network.hive.worker.AssignmentResult.locator:type_name -> od2_network.hive.worker.ItemLocator
	1,  // 9: od2_network.hive.worker.Assignments.OpenAssignmentsStream:input_type -> od2_network.hive.worker.OpenAssignmentsStreamRequest
	3,  // 10: od2_network.hive.worker.Assignments.CloseAssignmentsStream:input_type -> od2_network.hive.worker.CloseAssignmentsStreamRequest
	10, // 11: od2_network.hive.worker.Assignments.GetPendingAssignmentsCount:input_type -> od2_network.hive.worker.GetPendingAssignmentsCountRequest
	5,  // 12: od2_network.hive.worker.Assignments.WantAssignments:input_type -> od2_network.hive.worker.WantAssignmentsRequest
	7,  // 13: od2_network.hive.worker.Assignments.SurrenderAssignments:input_type -> od2_network.hive.worker.SurrenderAssignmentsRequest
	9,  // 14: od2_network.hive.worker.Assignments.StreamAssignments:input_type -> od2_network.hive.worker.StreamAssignmentsRequest
	15, // 15: od2_network.hive.worker.Assignments.ReportAssignments:input_type -> od2_network.hive.worker.ReportAssignmentsRequest
	2,  // 16: od2_network.hive.worker.Assignments.OpenAssignmentsStream:output_type -> od2_network.hive.worker.OpenAssignmentsStreamResponse
	4,  // 17: od2_network.hive.worker.Assignments.CloseAssignmentsStream:output_type -> od2_network.hive.worker.CloseAssignmentsStreamResponse
	11, // 18: od2_network.hive.worker.Assignments.GetPendingAssignmentsCount:output_type -> od2_network.hive.worker.PendingAssignmentsCount
	6,  // 19: od2_network.hive.worker.Assignments.WantAssignments:output_type -> od2_network.hive.worker.WantAssignmentsResponse
	8,  // 20: od2_network.hive.worker.Assignments.SurrenderAssignments:output_type -> od2_network.hive.worker.SurrenderAssignmentsResponse
	12, // 21: od2_network.hive.worker.Assignments.StreamAssignments:output_type -> od2_network.hive.worker.AssignmentBatch
	18, // 22: od2_network.hive.worker.Assignments.ReportAssignments:output_type -> od2_network.hive.worker.ReportAssignmentsResponse
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_jobs_proto_init() }
func file_jobs_proto_init() {
	if File_jobs_proto != nil {
		return
	}
	file_items_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_jobs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAssignmentsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenAssignmentsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAssignmentsStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseAssignmentsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WantAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WantAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurrenderAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurrenderAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingAssignmentsCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAssignmentsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaPointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Assignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAssignmentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignmentResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_jobs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportAssignmentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_jobs_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_jobs_proto_goTypes,
		DependencyIndexes: file_jobs_proto_depIdxs,
		EnumInfos:         file_jobs_proto_enumTypes,
		MessageInfos:      file_jobs_proto_msgTypes,
	}.Build()
	File_jobs_proto = out.File
	file_jobs_proto_rawDesc = nil
	file_jobs_proto_goTypes = nil
	file_jobs_proto_depIdxs = nil
}
