syntax = "proto3";

package od2_network.hive.worker;
option go_package = "go.od2.network/hive-api/worker";

import "items.proto";

// Assignments streams task assignments to workers.
service Assignments {
  // OpenAssignmentsStream opens a new gRPC assignments stream.
  // The assignments are load-balanced over all the active assignment streams.
  rpc OpenAssignmentsStream(OpenAssignmentsStreamRequest) returns (OpenAssignmentsStreamResponse);

  // CloseAssignmentsStream closes a gRPC assignments stream.
  rpc CloseAssignmentsStream(CloseAssignmentsStreamRequest) returns (CloseAssignmentsStreamResponse);

  // GetPendingAssignmentsCount returns the number of assignments that the server will push to the worker.
  // Calling WantAssignments increases this number.
  rpc GetPendingAssignmentsCount(GetPendingAssignmentsCountRequest) returns (PendingAssignmentsCount);

  // WantAssignments tells the server to send more assignments.
  rpc WantAssignments(WantAssignmentsRequest) returns (WantAssignmentsResponse);

  // SurrenderAssignments tells the server to reset all pending assignments.
  rpc SurrenderAssignments(SurrenderAssignmentsRequest) returns (SurrenderAssignmentsResponse);

  // StreamAssignments connects to the server-to-client assignment stream.
  rpc StreamAssignments(StreamAssignmentsRequest) returns (stream AssignmentBatch);

  // ReportAssignments reports about completed tasks.
  rpc ReportAssignments(ReportAssignmentsRequest) returns (ReportAssignmentsResponse);
}

message OpenAssignmentsStreamRequest {
  string collection = 1;
}
message OpenAssignmentsStreamResponse {
  int64 stream_id = 1;
}

message CloseAssignmentsStreamRequest {
  int64 stream_id = 1;
  string collection = 2;
}
message CloseAssignmentsStreamResponse {}

message WantAssignmentsRequest {
  int64 stream_id = 1;
  int32 add_watermark = 2; // Request N additional tasks
  string collection = 3;
}
message WantAssignmentsResponse {
  int32 added_watermark = 1; // N additional tasks granted
  int32 watermark = 2; // Total number of tasks granted
}

message SurrenderAssignmentsRequest {
  int64 stream_id = 1;
  string collection = 2;
}
message SurrenderAssignmentsResponse {
  int32 removed_watermark = 1;
}

message StreamAssignmentsRequest {
  int64 stream_id = 1;
  string collection = 2;
}

message GetPendingAssignmentsCountRequest {
  int64 stream_id = 1;
  string collection = 2;
}

message PendingAssignmentsCount {
  int32 watermark = 1; // N additional tasks for this stream
}

message AssignmentBatch {
  repeated Assignment assignments = 1;
}

message ReportAssignmentsRequest {
  repeated od2_network.hive.AssignmentReport reports = 1;
  string collection = 2;
}

message ReportAssignmentsResponse {
  int64 acknowledged = 1;
}
